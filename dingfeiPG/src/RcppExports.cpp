// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dingfeiPG
arma::mat dingfeiPG(arma::mat& X, double& lambda, arma::vec& Omega, arma::vec& index, const int& maxinteration);
RcppExport SEXP _dingfeiPG_dingfeiPG(SEXP XSEXP, SEXP lambdaSEXP, SEXP OmegaSEXP, SEXP indexSEXP, SEXP maxinterationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type Omega(OmegaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxinteration(maxinterationSEXP);
    rcpp_result_gen = Rcpp::wrap(dingfeiPG(X, lambda, Omega, index, maxinteration));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_dingfeiPG_dingfeiPG", (DL_FUNC) &_dingfeiPG_dingfeiPG, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_dingfeiPG(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
